{
  "Comment": "Process calendar event with social posts and event tracking",
  "StartAt": "What To Do With Event?",
  "States": {
    "What To Do With Event?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.operation",
          "StringEquals": "CREATE",
          "Next": "Identify Speakers"
        },
        {
          "Variable": "$.operation",
          "StringEquals": "REPLACE",
          "Next": "Delete Existing Social Campaign"
        }
      ],
      "Default": "Invalid Operation"
    },
    "Identify Speakers": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${IdentifyEventSpeakers}",
        "Payload": {
          "eventDescription.$": "$.event.description"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Save Event To Archive",
      "ResultPath": "$.speakers",
      "ResultSelector": {
        "names.$": "$.Payload.speakers"
      }
    },
    "Save Event To Archive": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${AddEvent}",
        "Payload": {
          "event.$": "$.event",
          "speakers.$": "$.speakers.names"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Add Event to Discord",
      "ResultPath": "$.createdEvent",
      "ResultSelector": {
        "id.$": "$.Payload.eventId",
        "missingSpeakers.$": "$.Payload.missingSpeakers",
        "hasMissingSpeakers.$": "$.Payload.hasMissingSpeakers",
        "speakers.$": "$.Payload.speakers"
      }
    },
    "Add Event to Discord": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${AddDiscordEvent}",
        "Payload": {
          "event.$": "$.event"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 5,
          "MaxAttempts": 5,
          "BackoffRate": 5
        }
      ],
      "Next": "Has Missing Speakers From Database?",
      "ResultPath": "$.discord",
      "ResultSelector": {
        "id.$": "$.Payload.id"
      }
    },
    "Has Missing Speakers From Database?": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.createdEvent.hasMissingSpeakers",
          "BooleanEquals": true,
          "Next": "Request Missing Speaker Data"
        }
      ],
      "Default": "Get Social Post Prompt and Schema"
    },
    "Request Missing Speaker Data": {
      "Type": "Task",
      "Resource": "${EventBridgePutEventsAndWait}",
      "HeartbeatSeconds": 86400,
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "eventId.$": "$.createdEvent.id",
              "missingSpeakers.$": "$.createdEvent.missingSpeakers",
              "contact.$": "$.event.contact",
              "token.$": "$$.Task.Token"
            },
            "DetailType": "Request Missing Speaker Data",
            "Source": "Create Calendar Event State Machine"
          }
        ]
      },
      "Catch": [
        {
          "ErrorEquals": [
            "States.HeartbeatTimeout"
          ],
          "Next": "Get Social Post Prompt and Schema",
          "ResultPath": null
        }
      ],
      "Next": "Get Social Post Prompt and Schema"
    },
    "Invalid Operation": {
      "Type": "Fail",
      "Error": "Invalid Operation"
    },
    "Get Social Post Prompt and Schema": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${CreateSocialPostPrompt}",
        "Payload": {
          "event.$": "$$.Execution.Input.event",
          "speakers.$": "$.createdEvent.speakers"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Build Social Posts",
      "ResultPath": "$.ai",
      "ResultSelector": {
        "prompt.$": "$.Payload.prompt",
        "schema.$": "$.Payload.schema"
      }
    },
    "Build Social Posts": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${AskOpenAI}",
        "Payload": {
          "model": "gpt-4o",
          "systemContext": "You are an expert social media marketer in the tech industry. You create social posts that have high engagement and registration conversions.",
          "query.$": "$.ai.prompt",
          "schema.$": "$.ai.schema"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.social",
      "ResultSelector": {
        "posts.$": "$.Payload.response"
      },
      "Next": "Replace Speaker Names With Tags"
    },
    "Replace Speaker Names With Tags": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "Parameters": {
        "FunctionName": "${ReplaceSpeakerNames}",
        "Payload": {
          "speakers.$": "$.createdEvent.speakers",
          "messages.$": "$.social.posts"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "ResultPath": "$.social",
      "ResultSelector": {
        "posts.$": "$.Payload"
      },
      "Next": "Save and Schedule"
    },
    "Save and Schedule": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "Save Calendar Event",
          "States": {
            "Save Calendar Event": {
              "Type": "Task",
              "Resource": "${DynamoDbPutItem}",
              "Parameters": {
                "TableName": "${TableName}",
                "Item": {
                  "pk": {
                    "S.$": "$.event.id"
                  },
                  "sk": {
                    "S": "event"
                  },
                  "date": {
                    "S.$": "$$.Execution.Input.event.startDate"
                  },
                  "neonId": {
                    "S.$": "States.Format('{}', $.createdEvent.id)"
                  },
                  "discordId": {
                    "S.$": "$.discord.id"
                  }
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "Format Scheduler Event",
          "States": {
            "Format Scheduler Event": {
              "Type": "Task",
              "Resource": "${LambdaInvoke}",
              "OutputPath": "$.Payload",
              "Parameters": {
                "FunctionName": "${FormatScheduleEvent}",
                "Payload": {
                  "posts.$": "$.social.posts"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2
                }
              ],
              "Next": "Schedule Social Posts"
            },
            "Schedule Social Posts": {
              "Type": "Task",
              "Resource": "${EventBridgePutEvents}",
              "Parameters": {
                "Entries": [
                  {
                    "Detail": {
                      "messages.$": "$.messages"
                    },
                    "DetailType": "Schedule Social Post",
                    "Source": "calendar.social-posts"
                  }
                ]
              },
              "ResultPath": null,
              "End": true
            }
          }
        }
      ],
      "ResultPath": null,
      "End": true
    },
    "Delete Existing Social Campaign": {
      "Type": "Task",
      "Resource": "${EventBridgePutEvents}",
      "Parameters": {
        "Entries": [
          {
            "Detail": {
              "campaign.$": "$.event.id",
              "accountId": "bis"
            },
            "DetailType": "Delete Social Campaign",
            "Source": "calendar.social-posts"
          }
        ]
      },
      "ResultPath": null,
      "Next": "Identify Speakers"
    }
  }
}
