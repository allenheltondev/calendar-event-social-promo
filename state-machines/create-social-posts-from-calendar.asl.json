{
  "Comment": "Calendar sync controller",
  "StartAt": "Get Calendar Events",
  "States": {
    "Get Calendar Events": {
      "Type": "Task",
      "Resource": "${LambdaInvoke}",
      "OutputPath": "$.Payload",
      "Parameters": {
        "Payload": {
          "calendarId": "${Calendar}"
        },
        "FunctionName": "${GetCalendarEvents}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2
        }
      ],
      "Next": "Iterate Events"
    },
    "Iterate Events": {
      "Type": "Map",
      "ItemProcessor": {
        "ProcessorConfig": {
          "Mode": "INLINE"
        },
        "StartAt": "Get Existing Item",
        "States": {
          "Get Existing Item": {
            "Type": "Task",
            "Resource": "${DynamoDbGetItem}",
            "Parameters": {
              "TableName": "${TableName}",
              "Key": {
                "pk": {
                  "S.$": "$.event.id"
                },
                "sk": {
                  "S": "event"
                }
              }
            },
            "ResultPath": "$.existingEvent",
            "Next": "What To Do With Event?"
          },
          "What To Do With Event?": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.existingEvent.Item",
                "IsPresent": false,
                "Next": "Set Operation to Create"
              },
              {
                "And": [
                  {
                    "Variable": "$.existingEvent.Item",
                    "IsPresent": true
                  },
                  {
                    "Not": {
                      "Variable": "$.existingEvent.Item.date.S",
                      "StringEqualsPath": "$.event.startDate"
                    }
                  }
                ],
                "Next": "Set Operation to Replace"
              }
            ],
            "Default": "Skip Processing"
          },
          "Set Operation to Replace": {
            "Type": "Pass",
            "Next": "Process Calendar Event",
            "Parameters": {
              "event.$": "$.event",
              "operation": "REPLACE"
            }
          },
          "Set Operation to Create": {
            "Type": "Pass",
            "Next": "Process Calendar Event",
            "Parameters": {
              "event.$": "$.event",
              "operation": "CREATE"
            }
          },
          "Process Calendar Event": {
            "Type": "Task",
            "Resource": "${StepFunctionsStartExecution}",
            "Parameters": {
              "StateMachineArn": "${ProcessCalendarEvent}",
              "Input": {
                "event.$": "$.event",
                "operation.$": "$.operation",
                "AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$": "$$.Execution.Id"
              }
            },
            "End": true
          },
          "Skip Processing": {
            "Type": "Pass",
            "End": true
          }
        }
      },
      "End": true,
      "ItemsPath": "$.events",
      "MaxConcurrency": 1,
      "ItemSelector": {
        "event.$": "$$.Map.Item.Value"
      }
    }
  }
}
